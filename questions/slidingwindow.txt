const flashcards = [
  {
    code: `
    // Find the average of all contiguous subarrays of size K
    function find_averages_of_subarrays(K, arr) {
      let result = [],
        windowSum = 0.0,
        windowStart = 0;
  
      for (let windowEnd = 0; windowEnd < arr.length; windowEnd++) {
        windowSum += arr[windowEnd];
        if (windowEnd >= K - 1) {
          result.push(windowSum / K);
          windowSum -= arr[windowStart];
          windowStart += 1;
        }
      }
  
      return result;
    }
  
    console.log(find_averages_of_subarrays(5, [1, 3, 2, 6, -1, 4, 1, 8, 2]));
    `,
    answer: `[2.2, 2.8, 2.4, 3.6, 2.8]`
  },
  {
    code: `
    // Find the maximum sum subarray of length K
    function max_sub_array_of_size_k(k, arr) {
      let max_sum = 0,
        window_sum = 0;
  
      for (let i = 0; i < arr.length - k + 1; i++) {
        window_sum = 0;
        for (let j = i; j < i + k; j++) {
          window_sum += arr[j];
        }
        max_sum = Math.max(max_sum, window_sum);
      }
  
      return max_sum;
    }
  
    console.log(max_sub_array_of_size_k(3, [2, 1, 5, 1, 3, 2]));
    `,
    answer: `9`
  },
  {
    code: `
    // Find the smallest subarray with a given sum
    function smallest_subarray_with_given_sum(s, arr) {
      let window_sum = 0,
        min_length = Infinity,
        window_start = 0;
  
      for (let window_end = 0; window_end < arr.length; window_end++) {
        window_sum += arr[window_end];
        while (window_sum >= s) {
          min_length = Math.min(min_length, window_end - window_start + 1);
          window_sum -= arr[window_start];
          window_start += 1;
        }
      }
  
      if (min_length === Infinity) {
        return 0;
      }
      return min_length;
    }
  
    console.log(smallest_subarray_with_given_sum(7, [2, 1, 5, 2, 3, 2]));
    `,
    answer: `2`
  },
  {
    code: `
    // Find the longest substring with K distinct characters
    function longest_substring_with_k_distinct(str, k) {
      let window_start = 0,
        max_length = 0,
        char_frequency = {};
  
      for (let window_end = 0; window_end < str.length; window_end++) {
        const right_char = str[window_end];
        if (!(right_char in char_frequency)) {
          char_frequency[right_char] = 0;
        }
        char_frequency[right_char] += 1;
        while (Object.keys(char_frequency).length > k) {
          const left_char = str[window_start];
          char_frequency[left_char] -= 1;
          if (char_frequency[left_char] === 0) {
            delete char_frequency[left_char];
          }
          window_start += 1;
        }
        max_length = Math.max(max_length, window_end - window_start + 1);
      }
  
      return max_length;
    }
  
    console.log(longest_substring_with_k_distinct("araaci", 2));
    `,
    answer: `4`
  },
  {
    code: `
    // Find the length of the longest substring having all distinct characters
    function non_repeat_substring(str) {
      let window_start = 0,
        max_length = 0,
        char_index_map = {};
  
      for (let window_end = 0; window_end < str.length; window_end++) {
        const right_char = str[window_end];
        if (right_char in char_index_map) {
          window_start = Math.max(window_start, char_index_map[right_char] + 1);
        }
        char_index_map[right_char] = window_end;
        max_length = Math.max(max_length, window_end - window_start + 1);
      }
  
      return max_length;
    }
  
    console.log(non_repeat_substring("aabccbb"));
    `,
    answer: `3`
  },
  {
    code: `
    // Given an array, find the average of all contiguous subarrays of size K
    function findAveragesOfSubarrays(K, arr) {
      const result = Array(arr.length - K + 1).fill(0.0);
      let windowSum = 0.0;
      let windowStart = 0;
      for (let windowEnd = 0; windowEnd < arr.length; windowEnd++) {
        windowSum += arr[windowEnd];
        if (windowEnd >= K - 1) {
          result[windowStart] = windowSum / K;
          windowSum -= arr[windowStart];
          windowStart += 1;
        }
      }
  
      return result;
    }
    console.log(findAveragesOfSubarrays(5, [1, 3, 2, 6, -1, 4, 1, 8, 2]));
    `,
    answer: `[2.2, 2.8, 2.4, 3.6, 2.8]`
  },
  {
    code: `
    // Find the maximum sum of any contiguous subarray of size K
    function maxSumSubarraySizeK(K, arr) {
      let maxSum = 0,
        windowSum = 0;
  
      for (let i = 0; i < arr.length - K + 1; i++) {
        windowSum = 0;
        for (let j = i; j < K + i; j++) {
          windowSum += arr[j];
        }
        maxSum = Math.max(maxSum, windowSum);
      }
  
      return maxSum;
    }
  
    console.log(maxSumSubarraySizeK(3, [2, 1, 5, 1, 3, 2]));
    `,
    answer: `9`
  },
  {
    code: `
    // Given an array of positive numbers and a positive number "k", find the maximum sum of any contiguous subarray of size "k"
    function max_sum(nums, k) {
      let max = 0;
      let current_sum = 0;
  
      for(let i = 0; i < nums.length; i++) {
        current_sum += nums[i];
        if(i >= k - 1) {
          max = Math.max(max, current_sum);
          current_sum -= nums[i - (k - 1)];
        }
      }
  
      return max;
    }
  
    console.log(max_sum([2, 1, 5, 1, 3, 2], 3));
    `,
    answer: `9`
  },
  {
    code: `
    // Given an array of characters and a number "k", find the length of the longest substring of repeating characters where you can replace "k" characters
    function longest_substring(s, k) {
      let window_start = 0;
      let max_length = 0;
      let max_repeat_letter_count = 0;
      let frequency_map = {};
  
      for(let window_end = 0; window_end < s.length; window_end++) {
        const right_char = s[window_end];
        if(!(right_char in frequency_map)) {
          frequency_map[right_char] = 0;
        }
        frequency_map[right_char] += 1;
        max_repeat_letter_count = Math.max(max_repeat_letter_count, frequency_map[right_char]);
  
        if((window_end - window_start + 1 - max_repeat_letter_count) > k) {
          let left_char = s[window_start];
          frequency_map[left_char]--;
          window_start++;
        }
  
        max_length = Math.max(max_length, window_end - window_start + 1);
      }
  
      return max_length;
    }
  
    console.log(longest_substring("aabccbb", 2));
    `,
    answer: `5`
  },
  {
    code: `
    // Given a string and a number "k", find the length of the longest substring of repeating characters by replacing "k" characters
    function length_of_longest_substring(str, k) {
      let window_start = 0,
        maxlen = 0,
        max_repeat_letter_count = 0,
        frequency_map = {};
  
      for (let window_end = 0; window_end < str.length; window_end++) {
        const right_char = str[window_end];
        if (!(right_char in frequency_map)) {
          frequency_map[right_char] = 0;
        }
        frequency_map[right_char] += 1;
        max_repeat_letter_count = Math.max(max_repeat_letter_count, frequency_map[right_char]);
  
        if ((window_end - window_start + 1 - max_repeat_letter_count) > k) {
          let left_char = str[window_start];
          frequency_map[left_char] -= 1;
          window_start += 1;
        }
  
        maxlen = Math.max(maxlen, window_end - window_start + 1);
      }
  
      return maxlen;
    }
  
    console.log(length_of_longest_substring("aabccbb", 2));
    `,
    answer: `5`
  }
];
